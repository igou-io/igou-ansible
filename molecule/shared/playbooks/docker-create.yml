---
# Generic Podman container create playbook
- name: Create Podman instances
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    molecule_podman_command: "{{ molecule_yml.platforms[0].command | default('') }}"
    molecule_podman_image: "{{ molecule_yml.platforms[0].image }}"
    molecule_privileged: "{{ molecule_yml.platforms[0].privileged | default(true) }}"

  tasks:
    - name: Create podman network(s)
      containers.podman.podman_network:
        name: "{{ item }}"
      with_items: "{{ molecule_yml.platforms | selectattr('networks', 'defined')
                    | map(attribute='networks') | flatten | map(attribute='name') | unique }}"
      when: molecule_yml.platforms | selectattr('networks', 'defined') | list | length > 0

    - name: Determine the CMD directives
      ansible.builtin.set_fact:
        molecule_podman_command: >-
          {{ molecule_podman_command }}
      when: molecule_podman_command != ''

    - name: Create molecule instance(s)
      containers.podman.podman_container:
        name: "{{ item.name }}"
        image: "{{ item.image }}"
        state: started
        recreate: false
        command: "{{ molecule_podman_command }}"
        privileged: "{{ item.privileged | default(molecule_privileged) }}"
        volume: "{{ item.volumes | default(omit) }}"
        cap_add: "{{ item.capabilities | default(omit) }}"
        expose: "{{ item.exposed_ports | default(omit) }}"
        publish: "{{ item.published_ports | default(omit) }}"
        ulimit: "{{ item.ulimits | default(omit) }}"
        network: "{{ item.networks | default(omit) }}"
        dns: "{{ item.dns_servers | default(omit) }}"
        env: "{{ item.env | default({}) }}"
        tmpfs: "{{ item.tmpfs | default(omit) }}"
        cgroupns: "{{ item.cgroupns_mode | default(omit) }}"
      register: server
      with_items: "{{ molecule_yml.platforms }}"
      async: 7200
      poll: 0

    - name: Wait for instance(s) creation to complete
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      register: podman_jobs
      until: podman_jobs.finished
      retries: 300
      with_items: "{{ server.results }}"
