---
- hosts: "{{ host }}"
  name: Configure remote vscode server
  gather_facts: true
  vars:
    kustomize_version: v5.1.1
    kustomize_url: "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/{{ kustomize_version }}/kustomize_{{ kustomize_version }}_linux_amd64.tar.gz"
    virtctl_version: v1.2.0
    virtctl_url: "https://github.com/kubevirt/kubevirt/releases/download/{{ virtctl_version }}/virtctl-{{ virtctl_version }}-linux-amd64"
    bashrc_exports:
      - { variable: "ANSIBLE_INVENTORY", value: "/home/igou/igou-inventory" }
      - { variable: "ANSIBLE_HOST_KEY_CHECKING", value: "False" }
      - { variable: "SSH_AUTH_SOCK", value: '$(ls -t /tmp/ssh-**/* | head -1)' }
      - { variable: "PATH", value: '$PATH:/home/igou/.local/bin:/home/igou/bin' }
    bashrc_aliases:
      - { variable: "k", value: "kubectl" }

  tasks:
    - name: Install system packages
      become: true
      block:
        - name: Install packages
          ansible.builtin.package:
            name:
              - git
              - vim
              - pipx
              - podman
              - tree
              - curl
              - unzip
              - jq
              - p7zip
              - nfs-common
              - sshpass
            update_cache: true

        - name: Install Terraform
          ansible.builtin.import_role:
            name: robertdebock.terraform
          vars:
            terraform_version: 1.8.1

        - name: Install Kubectl
          ansible.builtin.import_role:
            name: robertdebock.kubectl

        - name: Install Helm
          ansible.builtin.import_role:
            name: geerlingguy.helm
          vars:
            helm_version: v3.13.2

    - name: Install pipx dependencies
      block:
        - name: Install ansible via pipx
          community.general.pipx:
            state: present
            name: ansible
            install_deps: true

        - name: Install other packages via pipx
          community.general.pipx:
            state: present
            name: "{{ item }}"
            install_deps: true
          loop:
            - ansible-navigator
            - ansible-builder
            - awxkit
            - yq
            - mkdocs-material

    - name: Append multiple export commands to .bashrc
      ansible.builtin.lineinfile:
        path: "~/.bashrc"
        line: "export {{ item.variable }}={{ item.value }}"
        create: yes
        state: present
      loop: "{{ bashrc_exports }}"

    - name: Append multiple alias commands to .bashrc
      ansible.builtin.lineinfile:
        path: "~/.bashrc"
        line: "alias {{ item.variable }}={{ item.value }}"
        create: yes
        state: present
      loop: "{{ bashrc_aliases }}"

    - name: Create symbolic link for ansible-navigator
      ansible.builtin.file:
        src: /home/igou/igou-ansible/ansible-navigator.yml
        dest: /home/igou/ansible-navigator.yml
        state: link
        force: true

    - name: Ensure /home/igou/bin exists
      ansible.builtin.file:
        path: /home/igou/bin
        state: directory
        mode: 0755

    - name: Install Kustomize to /home/igou/bin
      ansible.builtin.unarchive:
        src: "{{ kustomize_url }}"
        dest: "/home/igou/bin"
        remote_src: yes
        creates: "/home/igou/bin/kustomize"

    - name: Install virtctl
      ansible.builtin.get_url:
        url: "{{ virtctl_url }}"
        dest: "/home/igou/bin/virtctl"
        mode: 0755
        #todo podman login to quay, get kubeconfigs from 1p

    - name: Write homelab project
      ansible.builtin.copy:
        dest: homelab-test.code-workspace
        content: |
          {
                  "folders": [
                          {
                                  "path": "igou-ansible"
                          },
                          {
                                  "path": "igou-inventory"
                          },
                          {
                                  "path": "igou-infrastructure"
                          },
                          {
                                  "path": "igou-kubernetes"
                          },
                          {
                                  "path": "igou-kubernetes-private"
                          },
                          {
                                  "path": "aap-ocpvirt-provisioning"
                          },
                          {
                                  "path": "igou-openshift"
                          },
                          {
                                  "path": "roles"
                          }
                  ],
                  "settings": {
                          "ansible.python.interpreterPath": "/usr/bin/python3",
                          "files.trimTrailingWhitespace": true,
                  "files.associations": {
                      "**/group_vars/**/*": "jinja-yaml",
                      "**/host_vars/**/*": "jinja-yaml",
                      "**/roles/**/*.yml": "ansible",
                      "**/playbooks/**/*.yml": "ansible",
                      "**/roles/**/*.yaml": "ansible",
                                  "**/playbooks/**/*.yaml": "ansible",
                      "ansible.cfg": "ini",
                      "**/*.yaml": "yaml",
                                  "**/*.yml": "yaml"
                          },
                          "ansible.validation.lint.enabled": false,
                          "ansible.validation.enabled": false,
                          "yaml.schemas": {
                                  "https://squidfunk.github.io/mkdocs-material/schema.json": "mkdocs.yml",
                                  "kubernetes://schema/v1@pod": "file:///home/igou/igou-kubernetes/apps/democratic-csi/benchmark-interactive.yml",
                                  "https://json.schemastore.org/helmfile.json": "file:///home/igou/igou-openshift/charts/ocp-base-config/templates/cert-manager/clusterissuer.yaml"
                          },
                          "ansible.lightspeed.suggestions.enabled": true
                  }
          }

    - name: write .vaultpassword.sh
      ansible.builtin.copy:
        dest: .vaultpassword.sh
        content: |
          #!/bin/sh
          echo ${ANSIBLE_VAULT_PASSWORD}

    - name: Create 1p env dir
      ansible.builtin.file:
        state: directory
        path: 1p-envs

    - name: write .vaultpassword.sh
      ansible.builtin.copy:
        dest: 1p-envs/ocp.env
        content: |
          export CONTROLLER_HOST=op://awx/aap/host
          export CONTROLLER_PASSWORD=op://awx/aap/password
          export CONTROLLER_USERNAME=op://awx/aap/username
          export ANSIBLE_VAULT_PASSWORD_FILE=/home/igou/igou-ansible/.vaultpassword.sh
          export ANSIBLE_VAULT_PASSWORD=op://awx/vault/password
          export K8S_AUTH_API_KEY=op://awx/ansible-robot-token/sa_token
          export K8S_AUTH_HOST=op://awx/ansible-robot-token/api_url